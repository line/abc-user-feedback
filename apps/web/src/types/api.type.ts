/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/admin/auth/email/code": {
    post: operations["AuthController_sendCode"];
  };
  "/api/admin/auth/email/code/verify": {
    post: operations["AuthController_verifyEmailCode"];
  };
  "/api/admin/auth/signUp/email": {
    post: operations["AuthController_signUpEmailUser"];
  };
  "/api/admin/auth/signUp/invitation": {
    post: operations["AuthController_signUpInvitationUser"];
  };
  "/api/admin/auth/signUp/oauth": {
    post: operations["AuthController_signUpOAuthUser"];
  };
  "/api/admin/auth/signIn/email": {
    post: operations["AuthController_signInEmail"];
  };
  "/api/admin/auth/signIn/oauth/loginURL": {
    get: operations["AuthController_redirectToLoginURL"];
  };
  "/api/admin/auth/signIn/oauth": {
    get: operations["AuthController_handleCallback"];
  };
  "/api/admin/auth/refresh": {
    get: operations["AuthController_refreshToken"];
  };
  "/api/admin/users": {
    get: operations["UserController_getAllUsers"];
    delete: operations["UserController_deleteUsers"];
  };
  "/api/admin/users/search": {
    post: operations["UserController_searchUsers"];
  };
  "/api/admin/users/{id}": {
    get: operations["UserController_getUser"];
    put: operations["UserController_updateUser"];
    delete: operations["UserController_deleteUser"];
  };
  "/api/admin/users/{userId}/roles": {
    get: operations["UserController_getRoles"];
  };
  "/api/admin/users/invite": {
    post: operations["UserController_inviteUser"];
  };
  "/api/admin/users/password/reset/code": {
    post: operations["UserController_requestResetPassword"];
  };
  "/api/admin/users/password/reset": {
    post: operations["UserController_resetPassword"];
  };
  "/api/admin/users/password/change": {
    post: operations["UserController_changePassword"];
  };
  "/api/admin/tenants": {
    get: operations["TenantController_get"];
    put: operations["TenantController_update"];
    post: operations["TenantController_setup"];
  };
  "/api/admin/tenants/{tenantId}/feedback-count": {
    get: operations["TenantController_countFeedbacks"];
  };
  "/api/admin/projects/{projectId}/roles": {
    get: operations["RoleController_getAllRolesByProjectId"];
    post: operations["RoleController_createRole"];
  };
  "/api/admin/projects/{projectId}/roles/{roleId}": {
    put: operations["RoleController_updateRole"];
    delete: operations["RoleController_deleteRole"];
  };
  "/api/admin/projects/{projectId}/members": {
    get: operations["MemberController_getAllRolesByProjectId"];
    post: operations["MemberController_create"];
  };
  "/api/admin/projects/{projectId}/members/{memberId}": {
    put: operations["MemberController_update"];
    delete: operations["MemberController_delete"];
  };
  "/api/admin/projects/{projectId}/api-keys": {
    get: operations["ApiKeyController_findAll"];
    post: operations["ApiKeyController_create"];
  };
  "/api/admin/projects/{projectId}/api-keys/{apiKeyId}/soft": {
    delete: operations["ApiKeyController_softDelete"];
  };
  "/api/admin/projects/{projectId}/api-keys/{apiKeyId}/recover": {
    delete: operations["ApiKeyController_recover"];
  };
  "/api/admin/projects/{projectId}/api-keys/{apiKeyId}": {
    delete: operations["ApiKeyController_delete"];
  };
  "/api/admin/projects/{projectId}/channels": {
    get: operations["ChannelController_findAllByProjectId"];
    post: operations["ChannelController_create"];
  };
  "/api/admin/projects/{projectId}/channels/name-check": {
    get: operations["ChannelController_checkName"];
  };
  "/api/admin/projects/{projectId}/channels/{channelId}": {
    get: operations["ChannelController_findOne"];
    put: operations["ChannelController_updateOne"];
    delete: operations["ChannelController_delete"];
  };
  "/api/admin/projects/{projectId}/channels/{channelId}/fields": {
    put: operations["ChannelController_updateFields"];
  };
  "/api/admin/projects/{projectId}/channels/image-upload-url-test": {
    post: operations["ChannelController_getImageUploadUrlTest"];
  };
  "/api/admin/fields/{fieldId}/options": {
    get: operations["OptionController_getOptions"];
    post: operations["OptionController_createOption"];
  };
  "/api/admin/projects": {
    get: operations["ProjectController_findAll"];
    post: operations["ProjectController_create"];
  };
  "/api/admin/projects/name-check": {
    get: operations["ProjectController_checkName"];
  };
  "/api/admin/projects/{projectId}": {
    get: operations["ProjectController_findOne"];
    put: operations["ProjectController_updateOne"];
    delete: operations["ProjectController_delete"];
  };
  "/api/admin/projects/{projectId}/feedback-count": {
    get: operations["ProjectController_countFeedbacks"];
  };
  "/api/admin/projects/{projectId}/issue-count": {
    get: operations["ProjectController_countIssues"];
  };
  "/api/admin/projects/{projectId}/channels/{channelId}/feedbacks": {
    post: operations["FeedbackController_create"];
    delete: operations["FeedbackController_deleteMany"];
  };
  "/api/admin/projects/{projectId}/channels/{channelId}/feedbacks/search": {
    post: operations["FeedbackController_findByChannelId"];
  };
  "/api/admin/projects/{projectId}/channels/{channelId}/feedbacks/{feedbackId}/issue/{issueId}": {
    post: operations["FeedbackController_addIssue"];
    delete: operations["FeedbackController_removeIssue"];
  };
  "/api/admin/projects/{projectId}/channels/{channelId}/feedbacks/export": {
    post: operations["FeedbackController_exportFeedbacks"];
  };
  "/api/admin/projects/{projectId}/channels/{channelId}/feedbacks/{feedbackId}": {
    put: operations["FeedbackController_updateFeedback"];
  };
  "/api/admin/projects/{projectId}/issues": {
    post: operations["IssueController_create"];
    delete: operations["IssueController_deleteMany"];
  };
  "/api/admin/projects/{projectId}/issues/{issueId}": {
    get: operations["IssueController_findById"];
    put: operations["IssueController_update"];
    delete: operations["IssueController_delete"];
  };
  "/api/admin/projects/{projectId}/issues/search": {
    post: operations["IssueController_findAllByProjectId"];
  };
  "/api/admin/statistics/issue/count": {
    get: operations["IssueStatisticsController_getCount"];
  };
  "/api/admin/statistics/issue/count-by-date": {
    get: operations["IssueStatisticsController_getCountByDate"];
  };
  "/api/admin/statistics/issue/count-by-status": {
    get: operations["IssueStatisticsController_getCountByStatus"];
  };
  "/api/admin/statistics/feedback": {
    get: operations["FeedbackStatisticsController_getCountByDateByChannel"];
  };
  "/api/admin/statistics/feedback/count": {
    get: operations["FeedbackStatisticsController_getCount"];
  };
  "/api/admin/statistics/feedback/issued-ratio": {
    get: operations["FeedbackStatisticsController_getIssuedRatio"];
  };
  "/api/admin/statistics/feedback-issue": {
    get: operations["FeedbackIssueStatisticsController_getCountByDateByIssue"];
  };
  "/api/admin/projects/{projectId}/issue-tracker": {
    get: operations["IssueTrackerController_findOne"];
    put: operations["IssueTrackerController_updateOne"];
    post: operations["IssueTrackerController_create"];
  };
  "/api/admin/projects/{projectId}/webhooks": {
    get: operations["WebhookController_getByProjectId"];
    post: operations["WebhookController_create"];
  };
  "/api/admin/projects/{projectId}/webhooks/{webhookId}": {
    get: operations["WebhookController_get"];
    put: operations["WebhookController_update"];
    delete: operations["WebhookController_delete"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    EmailVerificationMailingRequestDto: {
      email: string;
    };
    SendEmailCodeResponseDto: {
      expiredAt: string;
    };
    EmailVerificationCodeRequestDto: {
      email: string;
      code: string;
    };
    EmailUserSignUpRequestDto: {
      email: string;
      password: string;
    };
    InvitationUserSignUpRequestDto: {
      password: string;
      code: string;
      email: string;
    };
    OAuthUserSignUpRequestDto: {
      email: string;
      projectName: string;
      roleName: string;
    };
    EmailUserSignInRequestDto: {
      email: string;
      password: string;
    };
    SignInResponseDto: {
      accessToken: string;
      refreshToken: string;
    };
    OAuthLoginUrlResponseDto: {
      url: string;
    };
    PaginationMetaDto: {
      /** @example 10 */
      itemCount: number;
      /** @example 100 */
      totalItems: number;
      /** @example 10 */
      itemsPerPage: number;
      /** @example 10 */
      totalPages: number;
      /** @example 1 */
      currentPage: number;
    };
    ProjectDto: {
      id: number;
      name: string;
    };
    RoleDto: {
      name: string;
      project: components["schemas"]["ProjectDto"];
    };
    MemberDto: {
      id: number;
      role: components["schemas"]["RoleDto"];
    };
    GetAllUserResponse: {
      id: number;
      email: string;
      name: string;
      department: string | null;
      /** @enum {string} */
      type: "SUPER" | "GENERAL";
      members: components["schemas"]["MemberDto"][];
      /** Format: date-time */
      createdAt: string;
      /** @enum {string} */
      signUpMethod: "EMAIL" | "OAUTH";
    };
    GetAllUserResponseDto: {
      meta: components["schemas"]["PaginationMetaDto"];
      items: components["schemas"]["GetAllUserResponse"][];
    };
    TimeRange: {
      gte: string;
      lt: string;
    };
    UserSearchQuery: {
      email?: string;
      name?: string;
      department?: string;
      /** @enum {string} */
      type?: "SUPER" | "GENERAL";
      createdAt?: components["schemas"]["TimeRange"];
      projectId?: number;
    };
    UserOrder: {
      /** @enum {string} */
      createdAt: "ASC" | "DESC";
    };
    GetAllUsersRequestDto: {
      /**
       * @default 10
       * @example 10
       */
      limit?: number;
      /**
       * @default 1
       * @example 1
       */
      page?: number;
      query?: components["schemas"]["UserSearchQuery"];
      order?: components["schemas"]["UserOrder"];
    };
    DeleteUsersRequestDto: {
      ids: number[];
    };
    UserDto: {
      id: number;
      email: string;
      name: string;
      department: string | null;
      /** @enum {string} */
      type: "SUPER" | "GENERAL";
      /** @enum {string} */
      signUpMethod: "EMAIL" | "OAUTH";
    };
    RoleProjectDto: {
      id: number;
      createdAt: string;
      updatedAt: string;
      deletedAt: string;
      name: string;
      description: string;
    };
    RoleItemDto: {
      id: number;
      createdAt: string;
      updatedAt: string;
      deletedAt: string;
      name: string;
      permissions: ("feedback_download_read" | "feedback_update" | "feedback_delete" | "feedback_issue_update" | "issue_create" | "issue_update" | "issue_delete" | "project_update" | "project_delete" | "project_member_read" | "project_member_create" | "project_member_update" | "project_member_delete" | "project_role_read" | "project_role_create" | "project_role_update" | "project_role_delete" | "project_apikey_read" | "project_apikey_create" | "project_apikey_update" | "project_apikey_delete" | "project_tracker_read" | "project_tracker_update" | "project_webhook_read" | "project_webhook_create" | "project_webhook_update" | "project_webhook_delete" | "channel_create" | "channel_update" | "channel_delete" | "channel_field_read" | "channel_field_update" | "channel_image_read" | "channel_image_update")[];
      project: components["schemas"]["RoleProjectDto"];
    };
    GetRolesByIdResponseDto: {
      roles: components["schemas"]["RoleItemDto"][];
    };
    UpdateUserRequestDto: {
      name: string | null;
      department: string | null;
      /** @enum {string} */
      type?: "SUPER" | "GENERAL";
    };
    UserInvitationRequestDto: {
      email: string;
      /** @enum {string} */
      userType: "SUPER" | "GENERAL";
      roleId?: number;
    };
    ResetPasswordMailingRequestDto: {
      email: string;
    };
    ResetPasswordRequestDto: {
      email: string;
      code: string;
      password: string;
    };
    ChangePasswordRequestDto: {
      password: string;
      newPassword: string;
    };
    SetupTenantRequestDto: {
      siteName: string;
    };
    OAuthConfigRequestDto: {
      clientId: string;
      clientSecret: string;
      authCodeRequestURL: string;
      scopeString: string;
      accessTokenRequestURL: string;
      userProfileRequestURL: string;
      emailKey: string;
    };
    UpdateTenantRequestDto: {
      siteName: string;
      description: string | null;
      useEmail: boolean;
      isPrivate: boolean;
      isRestrictDomain: boolean;
      allowDomains: string[] | null;
      useOAuth: boolean;
      oauthConfig: components["schemas"]["OAuthConfigRequestDto"] | null;
    };
    OAuthConfigResponseDto: {
      oauthUse: boolean;
      clientId: string;
      clientSecret: string;
      authCodeRequestURL: string;
      scopeString: string;
      accessTokenRequestURL: string;
      userProfileRequestURL: string;
      emailKey: string;
    };
    GetTenantResponseDto: {
      id: number;
      siteName: string;
      description: string;
      useEmail: boolean;
      useOAuth: boolean;
      isPrivate: boolean;
      isRestrictDomain: boolean;
      allowDomains: string[];
      useEmailVerification: boolean;
      oauthConfig: components["schemas"]["OAuthConfigResponseDto"] | null;
    };
    CountFeedbacksByTenantIdResponseDto: {
      total: number;
    };
    GetAllRolesResponseRoleDto: {
      id: number;
      name: string;
      permissions: ("feedback_download_read" | "feedback_update" | "feedback_delete" | "feedback_issue_update" | "issue_create" | "issue_update" | "issue_delete" | "project_update" | "project_delete" | "project_member_read" | "project_member_create" | "project_member_update" | "project_member_delete" | "project_role_read" | "project_role_create" | "project_role_update" | "project_role_delete" | "project_apikey_read" | "project_apikey_create" | "project_apikey_update" | "project_apikey_delete" | "project_tracker_read" | "project_tracker_update" | "project_webhook_read" | "project_webhook_create" | "project_webhook_update" | "project_webhook_delete" | "channel_create" | "channel_update" | "channel_delete" | "channel_field_read" | "channel_field_update" | "channel_image_read" | "channel_image_update")[];
    };
    GetAllRolesResponseDto: {
      roles: components["schemas"]["GetAllRolesResponseRoleDto"][];
      total: number;
    };
    CreateRoleRequestDto: {
      name: string;
      permissions: ("feedback_download_read" | "feedback_update" | "feedback_delete" | "feedback_issue_update" | "issue_create" | "issue_update" | "issue_delete" | "project_update" | "project_delete" | "project_member_read" | "project_member_create" | "project_member_update" | "project_member_delete" | "project_role_read" | "project_role_create" | "project_role_update" | "project_role_delete" | "project_apikey_read" | "project_apikey_create" | "project_apikey_update" | "project_apikey_delete" | "project_tracker_read" | "project_tracker_update" | "project_webhook_read" | "project_webhook_create" | "project_webhook_update" | "project_webhook_delete" | "channel_create" | "channel_update" | "channel_delete" | "channel_field_read" | "channel_field_update" | "channel_image_read" | "channel_image_update")[];
    };
    UpdateRoleRequestDto: {
      name: string;
      permissions: ("feedback_download_read" | "feedback_update" | "feedback_delete" | "feedback_issue_update" | "issue_create" | "issue_update" | "issue_delete" | "project_update" | "project_delete" | "project_member_read" | "project_member_create" | "project_member_update" | "project_member_delete" | "project_role_read" | "project_role_create" | "project_role_update" | "project_role_delete" | "project_apikey_read" | "project_apikey_create" | "project_apikey_update" | "project_apikey_delete" | "project_tracker_read" | "project_tracker_update" | "project_webhook_read" | "project_webhook_create" | "project_webhook_update" | "project_webhook_delete" | "channel_create" | "channel_update" | "channel_delete" | "channel_field_read" | "channel_field_update" | "channel_image_read" | "channel_image_update")[];
    };
    MemberUserDto: {
      id: number;
      email: string;
      name: string;
      department: string;
    };
    MemberRoleDto: {
      id: number;
      name: string;
      permissions: ("feedback_download_read" | "feedback_update" | "feedback_delete" | "feedback_issue_update" | "issue_create" | "issue_update" | "issue_delete" | "project_update" | "project_delete" | "project_member_read" | "project_member_create" | "project_member_update" | "project_member_delete" | "project_role_read" | "project_role_create" | "project_role_update" | "project_role_delete" | "project_apikey_read" | "project_apikey_create" | "project_apikey_update" | "project_apikey_delete" | "project_tracker_read" | "project_tracker_update" | "project_webhook_read" | "project_webhook_create" | "project_webhook_update" | "project_webhook_delete" | "channel_create" | "channel_update" | "channel_delete" | "channel_field_read" | "channel_field_update" | "channel_image_read" | "channel_image_update")[];
    };
    GetAllMember: {
      id: number;
      user: components["schemas"]["MemberUserDto"];
      role: components["schemas"]["MemberRoleDto"];
      /** Format: date-time */
      createdAt: string;
    };
    GetAllMemberResponseDto: {
      members: components["schemas"]["GetAllMember"][];
      total: number;
    };
    CreateMemberRequestDto: {
      userId: number;
      roleId: number;
    };
    UpdateMemberRequestDto: {
      roleId: number;
    };
    CreateApiKeyRequestDto: {
      value?: string;
    };
    CreateApiKeyResponseDto: {
      id: number;
      value: string;
      /** Format: date-time */
      createdAt: string;
    };
    ApiKeyResponseDto: {
      id: number;
      value: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      deletedAt: string;
    };
    FindApiKeysResponseDto: {
      items: components["schemas"]["ApiKeyResponseDto"][];
    };
    ImageConfigRequestDto: {
      accessKeyId: string;
      secretAccessKey: string;
      endpoint: string;
      region: string;
      bucket: string;
      domainWhiteList: string[] | null;
    };
    /** @enum {string} */
    FieldFormatEnum: "text" | "keyword" | "number" | "select" | "multiSelect" | "date" | "images";
    /** @enum {string} */
    FieldTypeEnum: "DEFAULT" | "ADMIN" | "API";
    /** @enum {string} */
    FieldStatusEnum: "ACTIVE" | "INACTIVE";
    CreateChannelRequestFieldSelectOptionDto: {
      id?: number;
      name: string;
      key: string;
    };
    CreateChannelRequestFieldDto: {
      name: string;
      key: string;
      description: string | null;
      format: components["schemas"]["FieldFormatEnum"];
      type: components["schemas"]["FieldTypeEnum"];
      status: components["schemas"]["FieldStatusEnum"];
      options?: components["schemas"]["CreateChannelRequestFieldSelectOptionDto"][];
    };
    CreateChannelRequestDto: {
      name: string;
      description: string | null;
      imageConfig?: components["schemas"]["ImageConfigRequestDto"] | null;
      fields: components["schemas"]["CreateChannelRequestFieldDto"][];
    };
    CreateChannelResponseDto: {
      id: number;
    };
    ImageConfigResponseDto: {
      accessKeyId: string;
      secretAccessKey: string;
      endpoint: string;
      region: string;
      bucket: string;
      domainWhiteList: string[];
    };
    FindChannelsByProjectDto: {
      id: number;
      name: string;
      description: string;
      imageConfig: components["schemas"]["ImageConfigResponseDto"];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    FindChannelsByProjectIdResponseDto: {
      meta: components["schemas"]["PaginationMetaDto"];
      items: components["schemas"]["FindChannelsByProjectDto"][];
    };
    FindFieldsResponseSelectOptionDto: {
      id: number;
      name: string;
      key: string;
    };
    FindFieldsResponseDto: {
      id: number;
      /** @enum {string} */
      format: "text" | "keyword" | "number" | "select" | "multiSelect" | "date" | "images";
      /** @enum {string} */
      type: "DEFAULT" | "ADMIN" | "API";
      /** @enum {string} */
      status: "ACTIVE" | "INACTIVE";
      name: string;
      key: string;
      description: string | null;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      options: components["schemas"]["FindFieldsResponseSelectOptionDto"][];
    };
    FindChannelByIdResponseDto: {
      id: number;
      name: string;
      description: string;
      imageConfig: components["schemas"]["ImageConfigResponseDto"];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      fields: components["schemas"]["FindFieldsResponseDto"][];
    };
    UpdateChannelRequestDto: {
      name: string;
      description: string | null;
      imageConfig?: components["schemas"]["ImageConfigRequestDto"] | null;
    };
    UpdateChannelRequestFieldDto: {
      name: string;
      key: string;
      description: string | null;
      format: components["schemas"]["FieldFormatEnum"];
      type: components["schemas"]["FieldTypeEnum"];
      status: components["schemas"]["FieldStatusEnum"];
      options?: components["schemas"]["CreateChannelRequestFieldSelectOptionDto"][];
      id?: number;
    };
    UpdateChannelFieldsRequestDto: {
      fields: components["schemas"]["UpdateChannelRequestFieldDto"][];
    };
    ImageUploadUrlTestRequestDto: {
      accessKeyId: string;
      secretAccessKey: string;
      endpoint: string;
      region: string;
      bucket: string;
    };
    ImageUploadUrlTestResponseDto: {
      success: boolean;
    };
    FindOptionByFieldIdResponseDto: {
      id: number;
      name: string;
      key: string;
    };
    CreateOptionRequestDto: {
      name: string;
      key: string;
    };
    CreateOptionResponseDto: {
      id: number;
    };
    TimezoneDto: {
      countryCode: string;
      name: string;
      offset: string;
    };
    CreateMemberByNameDto: {
      roleName: string;
      userId: number;
    };
    CreateApiKeyByValueDto: {
      value: string;
    };
    CreateIssueTrackerRequestDto: {
      data: Record<string, never>;
    };
    CreateProjectRequestDto: {
      name: string;
      description: string | null;
      timezone: components["schemas"]["TimezoneDto"];
      roles?: components["schemas"]["CreateRoleRequestDto"][];
      members?: components["schemas"]["CreateMemberByNameDto"][];
      apiKeys?: components["schemas"]["CreateApiKeyByValueDto"][];
      issueTracker?: components["schemas"]["CreateIssueTrackerRequestDto"];
    };
    CreateProjectResponseDto: {
      id: number;
    };
    FindProjectByIdResponseDto: {
      id: number;
      name: string;
      description: string;
      timezone: components["schemas"]["TimezoneDto"];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    FindProjectsResponseDto: {
      meta: components["schemas"]["PaginationMetaDto"];
      items: components["schemas"]["FindProjectByIdResponseDto"][];
    };
    CountFeedbacksByIdResponseDto: {
      total: number;
    };
    CountIssuesByIdResponseDto: {
      total: number;
    };
    UpdateProjectRequestDto: {
      name: string;
      description: string | null;
      timezone: components["schemas"]["TimezoneDto"];
      roles?: components["schemas"]["CreateRoleRequestDto"][];
      members?: components["schemas"]["CreateMemberByNameDto"][];
      apiKeys?: components["schemas"]["CreateApiKeyByValueDto"][];
      issueTracker?: components["schemas"]["CreateIssueTrackerRequestDto"];
    };
    UpdateProjectResponseDto: {
      id: number;
    };
    Query: {
      /**
       * @description Search text for feedback data
       * @example payment
       */
      searchText?: string;
      /**
       * @example {
       *   "gte": "2023-01-01",
       *   "lt": "2023-12-31"
       * }
       */
      createdAt?: components["schemas"]["TimeRange"];
      /**
       * @example {
       *   "gte": "2023-01-01",
       *   "lt": "2023-12-31"
       * }
       */
      updatedAt?: components["schemas"]["TimeRange"];
    };
    FindFeedbacksByChannelIdRequestDto: {
      /**
       * @default 10
       * @example 10
       */
      limit?: number;
      /**
       * @default 1
       * @example 1
       */
      page?: number;
      /** @description You can query by key-value with this object. (createdAt, updatedAt are kind of examples) If you want to search by text, you can use 'searchText' key. */
      query?: components["schemas"]["Query"];
      /**
       * @description You can sort by specific feedback key with sort method values: 'ASC', 'DESC'
       * @example {
       *   "createdAt": "ASC"
       * }
       */
      sort?: Record<string, never>;
    };
    Feedback: Record<string, never>;
    FindFeedbacksByChannelIdResponseDto: {
      meta: components["schemas"]["PaginationMetaDto"];
      /**
       * @example [
       *   {
       *     "id": 1,
       *     "name": "feedback",
       *     "issues": [
       *       {
       *         "id": 1,
       *         "name": "issue"
       *       }
       *     ]
       *   }
       * ]
       */
      items: components["schemas"]["Feedback"][];
    };
    AddIssueResponseDto: {
      /**
       * @description Issue id
       * @example 1
       */
      issueId: number;
      /**
       * @description Issue id
       * @example 1
       */
      feedbackId: number;
    };
    ExportFeedbacksRequestDto: {
      /**
       * @default 10
       * @example 10
       */
      limit?: number;
      /**
       * @default 1
       * @example 1
       */
      page?: number;
      /** @description You can query by key-value with this object. (createdAt, updatedAt are kind of examples) If you want to search by text, you can use 'searchText' key. */
      query?: components["schemas"]["Query"];
      /**
       * @description You can sort by specific feedback key with sort method values: 'ASC', 'DESC'
       * @example {
       *   "createdAt": "ASC"
       * }
       */
      sort?: Record<string, never>;
      type: string;
      fieldIds?: number[];
    };
    DeleteFeedbacksRequestDto: {
      /**
       * @description Feedback ids in an array
       * @example [
       *   1,
       *   2
       * ]
       */
      feedbackIds: number[];
    };
    CreateIssueRequestDto: {
      /**
       * @description Issue name
       * @example payment issue
       */
      name: string;
    };
    CreateIssueResponseDto: {
      /**
       * @description Issue id
       * @example 1
       */
      id: number;
    };
    FindIssueByIdResponseDto: {
      /**
       * @description Issue id
       * @example 1
       */
      id: number;
      /**
       * @description Issue Name
       * @example 1
       */
      name: string;
      /**
       * @description Issue description
       * @example This is a payment issue
       */
      description: string;
      /**
       * @description Issue status
       * @example IN_PROGRESS
       * @enum {string}
       */
      status: "INIT" | "ON_REVIEW" | "IN_PROGRESS" | "RESOLVED" | "PENDING";
      /**
       * @description External Issue Id
       * @example 123
       */
      externalIssueId: string;
      /**
       * @description Feedback count of the issue
       * @example 100
       */
      feedbackCount: number;
      /**
       * Format: date-time
       * @description Created datetime of the issue
       * @example 2023-01-01T00:00:00.000Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description Updated datetime of the issue
       * @example 2023-01-01T00:00:00.000Z
       */
      updatedAt: string;
    };
    FindIssuesByProjectIdRequestDto: {
      /**
       * @default 10
       * @example 10
       */
      limit?: number;
      /**
       * @default 1
       * @example 1
       */
      page?: number;
      /**
       * @description You can query by key-value with this object. If you want to search by text, you can use 'searchText' key.
       * @example {
       *   "name": "issue name"
       * }
       */
      query?: Record<string, never>;
      /**
       * @description You can sort by specific feedback key with sort method values: 'ASC', 'DESC'
       * @example {
       *   "createdAt": "ASC"
       * }
       */
      sort?: Record<string, never>;
    };
    FindIssuesByProjectIdResponseDto: {
      meta: components["schemas"]["PaginationMetaDto"];
      items: components["schemas"]["FindIssueByIdResponseDto"][];
    };
    UpdateIssueRequestDto: {
      /**
       * @description Issue name
       * @example payment issue
       */
      name: string;
      /**
       * @description Issue description
       * @example This is a payment issue
       */
      description: string | null;
      /**
       * @description Issue status
       * @example IN_PROGRESS
       * @enum {string}
       */
      status?: "INIT" | "ON_REVIEW" | "IN_PROGRESS" | "RESOLVED" | "PENDING";
      /**
       * @description External Issue Id
       * @example 123
       */
      externalIssueId?: string;
    };
    DeleteIssuesRequestDto: {
      /**
       * @description Issue ids in an array to delete in chunk
       * @example [
       *   1,
       *   2,
       *   3
       * ]
       */
      issueIds: number[];
    };
    FindCountResponseDto: {
      count: number;
    };
    IssueStatistics: {
      startDate: string;
      endDate: string;
      count: number;
    };
    FindCountByDateResponseDto: {
      statistics: components["schemas"]["IssueStatistics"][];
    };
    IssueStatusStatistics: {
      status: string;
      count: number;
    };
    FindCountByStatusResponseDto: {
      statistics: components["schemas"]["IssueStatusStatistics"][];
    };
    StatisticData: {
      startDate: string;
      endDate: string;
      count: number;
    };
    ChannelStatisticData: {
      id: number;
      name: string;
      statistics: components["schemas"]["StatisticData"][];
    };
    FindCountByDateByChannelResponseDto: {
      channels: components["schemas"]["ChannelStatisticData"][];
    };
    FindIssuedRateResponseDto: {
      ratio: number;
    };
    IssueStatisticData: {
      startDate: string;
      endDate: string;
      feedbackCount: number;
    };
    IssueStatistic: {
      id: number;
      name: string;
      statistics: components["schemas"]["IssueStatisticData"][];
    };
    FindCountByDateByIssueResponseDto: {
      issues: components["schemas"]["IssueStatistic"][];
    };
    CreateIssueTrackerResponseDto: {
      id: number;
      data: Record<string, never>;
      /** Format: date-time */
      createdAt: string;
    };
    FindIssueTrackerResponseDto: {
      id: number;
      data: Record<string, never>;
    };
    UpdateIssueTrackerRequestDto: {
      data: Record<string, never>;
    };
    UpdateIssueTrackerResponseDto: {
      id: number;
      data: Record<string, never>;
      /** Format: date-time */
      createdAt: string;
    };
    EventDto: {
      /** @enum {string} */
      type: "FEEDBACK_CREATION" | "ISSUE_CREATION" | "ISSUE_STATUS_CHANGE" | "ISSUE_ADDITION";
      /** @enum {string} */
      status: "ACTIVE" | "INACTIVE";
      channelIds: number[];
    };
    CreateWebhookRequestDto: {
      name: string;
      url: string;
      /** @enum {string} */
      status: "ACTIVE" | "INACTIVE";
      events: components["schemas"]["EventDto"][];
    };
    CreateWebhookResponseDto: {
      id: number;
    };
    GetWebhookResponseEventDto: {
      id: number;
      /** @enum {string} */
      status: "ACTIVE" | "INACTIVE";
      /** @enum {string} */
      type: "FEEDBACK_CREATION" | "ISSUE_CREATION" | "ISSUE_STATUS_CHANGE" | "ISSUE_ADDITION";
      channels: components["schemas"]["FindChannelByIdResponseDto"][];
      /** Format: date-time */
      createdAt: string;
    };
    GetWebhookByIdResponseDto: {
      id: number;
      name: string;
      url: string;
      /** @enum {string} */
      status: "ACTIVE" | "INACTIVE";
      events: components["schemas"]["GetWebhookResponseEventDto"][];
      /** Format: date-time */
      createdAt: string;
    };
    GetWebhooksByProjectIdResponseDto: {
      items: components["schemas"]["GetWebhookByIdResponseDto"][];
    };
    UpdateWebhookRequestDto: {
      name: string;
      url: string;
      /** @enum {string} */
      status: "ACTIVE" | "INACTIVE";
      events: components["schemas"]["EventDto"][];
    };
    UpdateWebhookResponseDto: {
      id: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  AuthController_sendCode: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmailVerificationMailingRequestDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SendEmailCodeResponseDto"];
        };
      };
    };
  };
  AuthController_verifyEmailCode: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmailVerificationCodeRequestDto"];
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  AuthController_signUpEmailUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmailUserSignUpRequestDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  AuthController_signUpInvitationUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["InvitationUserSignUpRequestDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  AuthController_signUpOAuthUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["OAuthUserSignUpRequestDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  AuthController_signInEmail: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmailUserSignInRequestDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SignInResponseDto"];
        };
      };
    };
  };
  AuthController_redirectToLoginURL: {
    parameters: {
      query?: {
        callback_url?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["OAuthLoginUrlResponseDto"];
        };
      };
    };
  };
  AuthController_handleCallback: {
    responses: {
      200: {
        content: never;
      };
    };
  };
  AuthController_refreshToken: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SignInResponseDto"];
        };
      };
    };
  };
  UserController_getAllUsers: {
    parameters: {
      query?: {
        /** @example 10 */
        limit?: number;
        /** @example 1 */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetAllUserResponseDto"];
        };
      };
    };
  };
  UserController_deleteUsers: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteUsersRequestDto"];
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  UserController_searchUsers: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetAllUsersRequestDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetAllUserResponseDto"];
        };
      };
    };
  };
  UserController_getUser: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserDto"];
        };
      };
    };
  };
  UserController_updateUser: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateUserRequestDto"];
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  UserController_deleteUser: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  UserController_getRoles: {
    parameters: {
      path: {
        userId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetRolesByIdResponseDto"];
        };
      };
    };
  };
  UserController_inviteUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserInvitationRequestDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  UserController_requestResetPassword: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResetPasswordMailingRequestDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  UserController_resetPassword: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResetPasswordRequestDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  UserController_changePassword: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChangePasswordRequestDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  TenantController_get: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetTenantResponseDto"];
        };
      };
    };
  };
  TenantController_update: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateTenantRequestDto"];
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  TenantController_setup: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetupTenantRequestDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  TenantController_countFeedbacks: {
    parameters: {
      path: {
        tenantId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CountFeedbacksByTenantIdResponseDto"];
        };
      };
    };
  };
  RoleController_getAllRolesByProjectId: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetAllRolesResponseDto"];
        };
      };
    };
  };
  RoleController_createRole: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateRoleRequestDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  RoleController_updateRole: {
    parameters: {
      path: {
        projectId: number;
        roleId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateRoleRequestDto"];
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  RoleController_deleteRole: {
    parameters: {
      path: {
        roleId: number;
        projectId: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  MemberController_getAllRolesByProjectId: {
    parameters: {
      query: {
        createdAt: string;
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetAllMemberResponseDto"];
        };
      };
    };
  };
  MemberController_create: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateMemberRequestDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  MemberController_update: {
    parameters: {
      path: {
        memberId: number;
        projectId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateMemberRequestDto"];
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  MemberController_delete: {
    parameters: {
      path: {
        memberId: number;
        projectId: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  ApiKeyController_findAll: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FindApiKeysResponseDto"];
        };
      };
    };
  };
  ApiKeyController_create: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateApiKeyRequestDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["CreateApiKeyResponseDto"];
        };
      };
    };
  };
  ApiKeyController_softDelete: {
    parameters: {
      path: {
        apiKeyId: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  ApiKeyController_recover: {
    parameters: {
      path: {
        apiKeyId: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  ApiKeyController_delete: {
    parameters: {
      path: {
        apiKeyId: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  ChannelController_findAllByProjectId: {
    parameters: {
      query?: {
        /** @example 10 */
        limit?: number;
        /** @example 1 */
        page?: number;
        searchText?: string;
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FindChannelsByProjectIdResponseDto"];
        };
      };
    };
  };
  ChannelController_create: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateChannelRequestDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["CreateChannelResponseDto"];
        };
      };
    };
  };
  ChannelController_checkName: {
    parameters: {
      query: {
        name: string;
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  ChannelController_findOne: {
    parameters: {
      path: {
        channelId: number;
        projectId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FindChannelByIdResponseDto"];
        };
      };
    };
  };
  ChannelController_updateOne: {
    parameters: {
      path: {
        channelId: number;
        projectId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateChannelRequestDto"];
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  ChannelController_delete: {
    parameters: {
      path: {
        channelId: number;
        projectId: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  ChannelController_updateFields: {
    parameters: {
      path: {
        channelId: number;
        projectId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateChannelFieldsRequestDto"];
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  ChannelController_getImageUploadUrlTest: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ImageUploadUrlTestRequestDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ImageUploadUrlTestResponseDto"];
        };
      };
    };
  };
  OptionController_getOptions: {
    parameters: {
      path: {
        fieldId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FindOptionByFieldIdResponseDto"][];
        };
      };
    };
  };
  OptionController_createOption: {
    parameters: {
      path: {
        fieldId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateOptionRequestDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["CreateOptionResponseDto"];
        };
      };
    };
  };
  ProjectController_findAll: {
    parameters: {
      query?: {
        /** @example 10 */
        limit?: number;
        /** @example 1 */
        page?: number;
        searchText?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FindProjectsResponseDto"];
        };
      };
    };
  };
  ProjectController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateProjectRequestDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["CreateProjectResponseDto"];
        };
      };
    };
  };
  ProjectController_checkName: {
    parameters: {
      query: {
        name: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  ProjectController_findOne: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FindProjectByIdResponseDto"];
        };
      };
    };
  };
  ProjectController_updateOne: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateProjectRequestDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UpdateProjectResponseDto"];
        };
      };
    };
  };
  ProjectController_delete: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  ProjectController_countFeedbacks: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CountFeedbacksByIdResponseDto"];
        };
      };
    };
  };
  ProjectController_countIssues: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CountIssuesByIdResponseDto"];
        };
      };
    };
  };
  FeedbackController_create: {
    parameters: {
      path: {
        projectId: number;
        channelId: number;
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  FeedbackController_deleteMany: {
    parameters: {
      path: {
        channelId: number;
        projectId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteFeedbacksRequestDto"];
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  FeedbackController_findByChannelId: {
    parameters: {
      path: {
        channelId: number;
        projectId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FindFeedbacksByChannelIdRequestDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FindFeedbacksByChannelIdResponseDto"];
        };
      };
    };
  };
  FeedbackController_addIssue: {
    parameters: {
      path: {
        channelId: number;
        feedbackId: number;
        issueId: number;
        projectId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AddIssueResponseDto"];
        };
      };
    };
  };
  FeedbackController_removeIssue: {
    parameters: {
      path: {
        channelId: number;
        feedbackId: number;
        issueId: number;
        projectId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AddIssueResponseDto"];
        };
      };
    };
  };
  FeedbackController_exportFeedbacks: {
    parameters: {
      path: {
        channelId: number;
        projectId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExportFeedbacksRequestDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  FeedbackController_updateFeedback: {
    parameters: {
      path: {
        channelId: number;
        feedbackId: number;
        projectId: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  IssueController_create: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateIssueRequestDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CreateIssueResponseDto"];
        };
      };
    };
  };
  IssueController_deleteMany: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteIssuesRequestDto"];
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  IssueController_findById: {
    parameters: {
      path: {
        issueId: number;
        projectId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FindIssueByIdResponseDto"][];
        };
      };
    };
  };
  IssueController_update: {
    parameters: {
      path: {
        projectId: number;
        issueId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateIssueRequestDto"];
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  IssueController_delete: {
    parameters: {
      path: {
        issueId: number;
        projectId: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  IssueController_findAllByProjectId: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FindIssuesByProjectIdRequestDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FindIssuesByProjectIdResponseDto"];
        };
      };
    };
  };
  IssueStatisticsController_getCount: {
    parameters: {
      query: {
        from: string;
        to: string;
        projectId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FindCountResponseDto"];
        };
      };
    };
  };
  IssueStatisticsController_getCountByDate: {
    parameters: {
      query: {
        startDate: string;
        endDate: string;
        interval: string;
        projectId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FindCountByDateResponseDto"];
        };
      };
    };
  };
  IssueStatisticsController_getCountByStatus: {
    parameters: {
      query: {
        projectId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FindCountByStatusResponseDto"];
        };
      };
    };
  };
  FeedbackStatisticsController_getCountByDateByChannel: {
    parameters: {
      query: {
        startDate: string;
        endDate: string;
        interval: string;
        channelIds: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FindCountByDateByChannelResponseDto"];
        };
      };
    };
  };
  FeedbackStatisticsController_getCount: {
    parameters: {
      query: {
        from: string;
        to: string;
        projectId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FindCountResponseDto"];
        };
      };
    };
  };
  FeedbackStatisticsController_getIssuedRatio: {
    parameters: {
      query: {
        from: string;
        to: string;
        projectId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FindIssuedRateResponseDto"];
        };
      };
    };
  };
  FeedbackIssueStatisticsController_getCountByDateByIssue: {
    parameters: {
      query: {
        startDate: string;
        endDate: string;
        interval: string;
        issueIds: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FindCountByDateByIssueResponseDto"];
        };
      };
    };
  };
  IssueTrackerController_findOne: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FindIssueTrackerResponseDto"];
        };
      };
    };
  };
  IssueTrackerController_updateOne: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateIssueTrackerRequestDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UpdateIssueTrackerResponseDto"];
        };
      };
    };
  };
  IssueTrackerController_create: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateIssueTrackerRequestDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["CreateIssueTrackerResponseDto"];
        };
      };
    };
  };
  WebhookController_getByProjectId: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetWebhooksByProjectIdResponseDto"];
        };
      };
    };
  };
  WebhookController_create: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateWebhookRequestDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["CreateWebhookResponseDto"];
        };
      };
    };
  };
  WebhookController_get: {
    parameters: {
      path: {
        webhookId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetWebhookByIdResponseDto"];
        };
      };
    };
  };
  WebhookController_update: {
    parameters: {
      path: {
        projectId: number;
        webhookId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateWebhookRequestDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UpdateWebhookResponseDto"];
        };
      };
    };
  };
  WebhookController_delete: {
    parameters: {
      path: {
        webhookId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetWebhookByIdResponseDto"];
        };
      };
    };
  };
}
